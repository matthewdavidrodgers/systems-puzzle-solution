06/01
    First thought: readme specifies starting the db with a second command. Isn't the point of compose to abstract and automate it all to one command? (up) Just use depends-on: db
    Start with high level: examine the docker-compose.yml
        Looks like the dbdata volume isn't mounted? Need to look into syntax
        Both the db and the flask app have the same env_file?
        * Syntax not uniform. Volume not quoted for flaskapp. Probably correct, db wrong
        Don't think ports are supposed to be quoted either
        Don't know anything about nginx conf files. Need to research
    Before doing anything, run system. Record errors.
        run --rm removes the container when finished, even though it was used to connect to the db. Maybe not rm, just detach? Or maybe make the file system persistent? Couldn't I just move the db connect to the app?
        Warning: the flaskapp command notes that it was built. To rebuild: docker-compose build or docker-compose up --build
        No other errors or warnings
        Didn't need to create db, saw it was already running
        Nothing from localhost
        Shuts down gracefully
    Looking up example docker-compose.yml file for basic errors
        Version number is double quoted
        Ports are supposed to be quoted (first number is actual machine, second is container)
        * nginx ports are backwards
        Looks like volumes can be quoted or not
    Need to go piece-wise. Get db running, get flaskapp running, then nginx.
        db:
            start the db service, exec /bin/bash into the container, hit the db
            seems to be fine
        flaskapp:
            start db, expose a port for the flaskapp, start it (not detached)
            * system dialog tells me it's exposed on 5000 (flask default?) while nginx routes to 5001. Need to change
            can route correctly, but /success displays garbage. Rendering or db?
        nginx:
            seems to be working fine now. Data persisting on /success
            Inspecting the source shows objects (object ids?) returned for /success, not data. Hopefully a routing thing, not a sql thing
    garbage comes from a db_session.query(Items).all() must research this database package to see what a query returns
    not a module: database.py actually. Hits sqlalchemy. Run through documentation there.
    Returning a models.Items object. str()'ing this just gives an object id. Need to get all fields
    IDs from db seem inconsistent

06/02
    Removed dbdata volume, started over with fixes.
    db spits out a lot of logs. Lot of servers stopping? Seems to init correctly
06/04
    Trying on an ubuntu vm. Docker had initial issues
    docker-compose asked to change version 3 to 2. Hm. Didn't on mac.
    So I can push the init_db into app.py if I start db first manually. Need to try this later.
    Found a bug. On name: "da first", quantity: "1", description: "uhone" there was a sql error. I assume it has to do with the space in name.
